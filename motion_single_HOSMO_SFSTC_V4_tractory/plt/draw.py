import matplotlib.pyplot as plt
import numpy as np
import pickle

# 全局设置字体大小
plt.rcParams.update({'font.size': 20})
# 设置 Matplotlib 的字体（适用于 Windows）
plt.rcParams['font.sans-serif'] = ['SimHei']  # 黑体
plt.rcParams['axes.unicode_minus'] = False    # 解决负号显示问题

# 读取 pkl 文件
with open("ffstc_data.pkl", "rb") as f:
    loaded_data = pickle.load(f)

# # 访问数据
# print("加载的数据:", loaded_data)
# print("path:", loaded_data["path"])
# print("error:", loaded_data["error"])
# print("input:", loaded_data["input"])
# print("valid_input:", loaded_data["valid_input"])

# current_axis =  np.array(loaded_data["current"])[:, 0].reshape(-1)
potision = loaded_data["path"]
position_x_axis = np.array([log[0] for log in loaded_data["path"]])
position_y_axis = np.array([log[1] for log in loaded_data["path"]])
# position_hat_x_axis = np.array([log[0, 0] for log in homos_observer.hat_q_log])
# position_hat_y_axis = np.array([log[1, 0] for log in homos_observer.hat_q_log])
# disturb_hat_x_axis = np.array([log[0, 0] for log in homos_observer.hat_disturb_log])
# disturb_hat_y_axis = np.array([log[1, 0] for log in homos_observer.hat_disturb_log])

# 轨迹分析
plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], loaded_data["ref_path"][:, 0].reshape(-1), label="X轴目标轨迹")
plt.plot(loaded_data["time"], position_x_axis, label="X轴真实轨迹")
# plt.plot(t, position_hat_x_axis, label="hat_trajectory")
plt.xlabel('时间(s)')
plt.ylabel('X轴位置(mm)')
plt.title('X轴轨迹')
plt.legend()
plt.grid()
plt.savefig("ffstc-x-axis.jpg")

plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], loaded_data["ref_path"][:, 1].reshape(-1), label="Y轴目标轨迹")
plt.plot(loaded_data["time"], position_y_axis, label="Y轴真实轨迹")
plt.xlabel('时间(s)')
plt.ylabel('Y轴位置(mm)')
plt.title('Y轴轨迹')
plt.legend()
plt.grid()
plt.savefig("ffstc-y-axis.jpg")

plt.figure(figsize=(10, 6))
plt.plot(loaded_data["ref_path"][:, 0].reshape(-1), loaded_data["ref_path"][:, 1].reshape(-1), label="target trajectory")
plt.plot(position_x_axis, position_y_axis, label="trajectory")
plt.xlabel('x-axis position')
plt.ylabel('y-axis position')
plt.title('trajectory')
plt.legend()
plt.grid()
plt.savefig("ffstc-path.jpg")

# 偏差分析
error_x_axis = np.array([log[0, 0] for log in loaded_data["error"]])
error_y_axis = np.array([log[1, 0] for log in loaded_data["error"]])
error_velx_axis = np.array([log[2, 0] for log in loaded_data["state_flat"]])
error_vely_axis = np.array([log[3, 0] for log in loaded_data["state_flat"]])

plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], error_x_axis, label="X轴误差")
# plt.xlim(0, 6)
plt.xlabel('时间(s)')
plt.ylabel('X轴误差(mm)')
plt.title('X轴误差')
plt.legend()
plt.grid()
plt.savefig("error-x-axis.jpg")

plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], error_y_axis, label="Y轴误差")
# plt.xlim(0, 6)
plt.xlabel('时间(s)')
plt.ylabel('Y轴误差(mm)')
plt.title('Y轴误差')
plt.legend()
plt.grid()
plt.savefig("error-y-axis.jpg")

plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], error_velx_axis, label="X轴速度误差")
# plt.xlim(0, 6)
plt.xlabel('时间(s)')
plt.ylabel('X轴速度误差(mm/s)')
plt.title('X轴速度误差')
plt.legend()
plt.grid()
plt.savefig("error_vel_x_axis.jpg")

plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], error_vely_axis, label="Y轴速度误差")
# plt.xlim(0, 6)
plt.xlabel('时间(s)')
plt.ylabel('Y轴速度误差(mm/s)')
plt.title('Y轴速度误差')
plt.legend()
plt.grid()
plt.savefig("error_vel_y_axis.jpg")

# 输入分析
input_avv_velocity = np.array([log[0] for log in loaded_data["input"]])
input_vel_theta = np.array([log[1] for log in loaded_data["input"]])
# dead_input_x_axis = np.array([log[0, 0] for log in loaded_data["valid_input"]])
# dead_input_y_axis = np.array([log[1, 0] for log in loaded_data["valid_input"]])
# input_smith_x_axis = np.array([log[0, 0] for log in loaded_data["input_smith"]])
# input_smith_y_axis = np.array([log[1, 0] for log in loaded_data["input_smith"]])

plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], input_avv_velocity, label="X轴输入")
# plt.plot(loaded_data["time"], dead_input_x_axis, label="X轴有效")
# plt.xlim(0, 6)
plt.xlabel('时间(s)')
plt.ylabel('加速度输入(m/s^2)')
plt.title('加速度输入')
plt.legend()
plt.grid()
plt.savefig("input-x-axis.jpg")

plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], input_vel_theta, label="Y轴输入")
# plt.plot(loaded_data["time"], dead_input_y_axis, label="valid_input_axis")
# plt.xlim(0, 6)
plt.xlabel('时间(s)')
plt.ylabel('角速度输入(rad/s)')
plt.title('角速度输入')
plt.legend()
plt.grid()
plt.savefig("input-y-axis.jpg")

# plt.figure(figsize=(10, 6))
# plt.plot(loaded_data["time"], input_smith_x_axis/1000, label="X轴Smith补偿后输入")
# # plt.plot(loaded_data["time"], dead_input_x_axis, label="X轴有效")
# # plt.ylim(-1, 1)
# plt.xlabel('时间(s)')
# plt.ylabel('X轴Smith补偿后输入(N)')
# plt.title('X轴Smith补偿后输入')
# plt.legend()
# plt.grid()
# plt.savefig("input-smith-x-axis.jpg")
#
# plt.figure(figsize=(10, 6))
# plt.plot(loaded_data["time"], input_smith_y_axis/1000, label="Y轴Smith补偿后输入")
# # plt.plot(loaded_data["time"], dead_input_y_axis, label="valid_input_axis")
# # plt.ylim(-1, 1)
# plt.xlabel('时间(s)')
# plt.ylabel('Y轴Smith补偿后输入(N)')
# plt.title('Y轴Smith补偿后输入')
# plt.legend()
# plt.grid()
# plt.savefig("input-smith-y-axis.jpg")

# 电流分析
plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], np.array(loaded_data["current"])[:, 0].reshape(-1), label="X轴电流")
# plt.xlim(0, 6)
plt.xlabel('时间(s)')
plt.ylabel('电流(A)')
plt.title('X轴电流')
plt.legend()
plt.grid()
plt.savefig("x_current.jpg")

plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], np.array(loaded_data["current"])[:, 1].reshape(-1), label="Y轴电流")
# plt.xlim(0, 6)
plt.xlabel('时间(s)')
plt.ylabel('电流(A)')
plt.title('Y轴电流')
plt.legend()
plt.grid()
plt.savefig("y_current.jpg")

plt.figure(figsize=(10, 6))
plt.plot(loaded_data["time"], np.array(loaded_data["current"])[:, 2].reshape(-1), label="Z轴电流")
# plt.xlim(0, 6)
plt.xlabel('时间(s)')
plt.ylabel('电流(A)')
plt.title('Z轴电流')
plt.legend()
plt.grid()
plt.savefig("z_current.jpg")

# L_state = np.array([log[:] for log in loaded_data["L_state"]])
# cost_state = np.array([log[:] for log in loaded_data["cost_state"]])
# exceed_flag_state = np.array([log[:] for log in loaded_data["exceed_flag_state"]])
# current_x_error_robust_state = np.array([log[0, 0] for log in loaded_data["current_error_robust_state"]])
# current_y_error_robust_state = np.array([log[1, 0] for log in loaded_data["current_error_robust_state"]])
# current_velx_error_robust_state = np.array([log[2, 0] for log in loaded_data["current_error_robust_state"]])
# current_vely_error_robust_state = np.array([log[3, 0] for log in loaded_data["current_error_robust_state"]])
# det_L_augumented_state = np.array(loaded_data["det_L_augumented_state"])
# Ks_state = np.array(loaded_data["Ks_state"])

# plt.figure(figsize=(10, 6))
# plt.plot(loaded_data["time"], error_x_axis, label="X轴总偏差")
# plt.plot(loaded_data["time"], current_x_error_robust_state, label="X轴分离鲁棒偏差")
# # plt.plot(t, position_hat_x_axis, label="hat_trajectory")
# plt.xlabel('时间(s)')
# plt.ylabel('X轴位置(mm)')
# plt.title('X轴偏差对比')
# plt.legend()
# plt.grid()
# plt.savefig("ffstc-x-error-compare.jpg")

# plt.figure(figsize=(10, 6))
# plt.plot(loaded_data["time"], error_y_axis, label="Y轴总偏差")
# plt.plot(loaded_data["time"], current_y_error_robust_state, label="Y轴分离鲁棒偏差")
# # plt.plot(t, position_hat_x_axis, label="hat_trajectory")
# plt.xlabel('时间(s)')
# plt.ylabel('Y轴位置(mm)')
# plt.title('Y轴偏差对比')
# plt.legend()
# plt.grid()
# plt.savefig("ffstc-y-error-compare.jpg")

# plt.figure(figsize=(10, 6))
# plt.plot(loaded_data["time"], error_velx_axis, label="X轴速度总偏差")
# plt.plot(loaded_data["time"], current_velx_error_robust_state, label="X轴速度分离鲁棒偏差")
# # plt.plot(t, position_hat_x_axis, label="hat_trajectory")
# plt.xlabel('时间(s)')
# plt.ylabel('X轴速度(mm/s)')
# plt.title('X轴速度偏差对比')
# plt.legend()
# plt.grid()
# plt.savefig("ffstc-velx-error-compare.jpg")

# plt.figure(figsize=(10, 6))
# plt.plot(loaded_data["time"], error_vely_axis, label="Y轴速度总偏差")
# plt.plot(loaded_data["time"], current_vely_error_robust_state, label="Y轴速度分离鲁棒偏差")
# # plt.plot(t, position_hat_x_axis, label="hat_trajectory")
# plt.xlabel('时间(s)')
# plt.ylabel('Y轴速度(mm/s)')
# plt.title('Y轴速度偏差对比')
# plt.legend()
# plt.grid()
# plt.savefig("ffstc-vely-error-compare.jpg")

# plt.figure(figsize=(10, 6))
# plt.plot(det_L_augumented_state, label="L")
# # plt.plot(t, position_hat_x_axis, label="hat_trajectory")
# plt.xlabel('时间(s)')
# plt.ylabel('L')
# plt.title('L行列式')
# plt.legend()
# plt.grid()
# plt.savefig("ffstc-L-det.jpg")

plt.show()

